//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace getsetcode.Model
{
    public partial class Skill
    {
        #region Primitive Properties
    
        public virtual int SkillId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string ShortName
        {
            get;
            set;
        }
    
        public virtual string Summary
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateAcquired
        {
            get;
            set;
        }
    
        public virtual string CurrentVersion
        {
            get;
            set;
        }
    
        public virtual bool IsCoreSkill
        {
            get;
            set;
        }
    
        public virtual byte Rank
        {
            get;
            set;
        }
    
        public virtual byte SkillCategoryId
        {
            get { return _skillCategoryId; }
            set
            {
                if (_skillCategoryId != value)
                {
                    if (SkillCategory != null && SkillCategory.SkillCategoryId != value)
                    {
                        SkillCategory = null;
                    }
                    _skillCategoryId = value;
                }
            }
        }
        private byte _skillCategoryId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ProjectSkill> ProjectSkills
        {
            get
            {
                if (_projectSkills == null)
                {
                    var newCollection = new FixupCollection<ProjectSkill>();
                    newCollection.CollectionChanged += FixupProjectSkills;
                    _projectSkills = newCollection;
                }
                return _projectSkills;
            }
            set
            {
                if (!ReferenceEquals(_projectSkills, value))
                {
                    var previousValue = _projectSkills as FixupCollection<ProjectSkill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProjectSkills;
                    }
                    _projectSkills = value;
                    var newValue = value as FixupCollection<ProjectSkill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProjectSkills;
                    }
                }
            }
        }
        private ICollection<ProjectSkill> _projectSkills;
    
        public virtual SkillCategory SkillCategory
        {
            get { return _skillCategory; }
            set
            {
                if (!ReferenceEquals(_skillCategory, value))
                {
                    var previousValue = _skillCategory;
                    _skillCategory = value;
                    FixupSkillCategory(previousValue);
                }
            }
        }
        private SkillCategory _skillCategory;

        #endregion
        #region Association Fixup
    
        private void FixupSkillCategory(SkillCategory previousValue)
        {
            if (previousValue != null && previousValue.Skills.Contains(this))
            {
                previousValue.Skills.Remove(this);
            }
    
            if (SkillCategory != null)
            {
                if (!SkillCategory.Skills.Contains(this))
                {
                    SkillCategory.Skills.Add(this);
                }
                if (SkillCategoryId != SkillCategory.SkillCategoryId)
                {
                    SkillCategoryId = SkillCategory.SkillCategoryId;
                }
            }
        }
    
        private void FixupProjectSkills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProjectSkill item in e.NewItems)
                {
                    item.Skill = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectSkill item in e.OldItems)
                {
                    if (ReferenceEquals(item.Skill, this))
                    {
                        item.Skill = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace getsetcode.Model
{
    public partial class Image
    {
        #region Primitive Properties
    
        public virtual int ImageId
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string FileName
        {
            get;
            set;
        }
    
        public virtual int Width
        {
            get;
            set;
        }
    
        public virtual int Height
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ThumbnailId
        {
            get { return _thumbnailId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_thumbnailId != value)
                    {
                        if (Thumbnail != null && Thumbnail.ImageId != value)
                        {
                            Thumbnail = null;
                        }
                        _thumbnailId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _thumbnailId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ProjectImage> ImageProjects
        {
            get
            {
                if (_imageProjects == null)
                {
                    var newCollection = new FixupCollection<ProjectImage>();
                    newCollection.CollectionChanged += FixupImageProjects;
                    _imageProjects = newCollection;
                }
                return _imageProjects;
            }
            set
            {
                if (!ReferenceEquals(_imageProjects, value))
                {
                    var previousValue = _imageProjects as FixupCollection<ProjectImage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImageProjects;
                    }
                    _imageProjects = value;
                    var newValue = value as FixupCollection<ProjectImage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImageProjects;
                    }
                }
            }
        }
        private ICollection<ProjectImage> _imageProjects;
    
        public virtual ICollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    var newCollection = new FixupCollection<Project>();
                    newCollection.CollectionChanged += FixupProjects;
                    _projects = newCollection;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    var previousValue = _projects as FixupCollection<Project>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    var newValue = value as FixupCollection<Project>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProjects;
                    }
                }
            }
        }
        private ICollection<Project> _projects;
    
        public virtual ICollection<Client> Clients
        {
            get
            {
                if (_clients == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients;
                    _clients = newCollection;
                }
                return _clients;
            }
            set
            {
                if (!ReferenceEquals(_clients, value))
                {
                    var previousValue = _clients as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients;
                    }
                    _clients = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients;
                    }
                }
            }
        }
        private ICollection<Client> _clients;
    
        public virtual ICollection<Image> FullSizeVersions
        {
            get
            {
                if (_fullSizeVersions == null)
                {
                    var newCollection = new FixupCollection<Image>();
                    newCollection.CollectionChanged += FixupFullSizeVersions;
                    _fullSizeVersions = newCollection;
                }
                return _fullSizeVersions;
            }
            set
            {
                if (!ReferenceEquals(_fullSizeVersions, value))
                {
                    var previousValue = _fullSizeVersions as FixupCollection<Image>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFullSizeVersions;
                    }
                    _fullSizeVersions = value;
                    var newValue = value as FixupCollection<Image>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFullSizeVersions;
                    }
                }
            }
        }
        private ICollection<Image> _fullSizeVersions;
    
        public virtual Image Thumbnail
        {
            get { return _thumbnail; }
            set
            {
                if (!ReferenceEquals(_thumbnail, value))
                {
                    var previousValue = _thumbnail;
                    _thumbnail = value;
                    FixupThumbnail(previousValue);
                }
            }
        }
        private Image _thumbnail;
    
        public virtual ICollection<Person> People
        {
            get
            {
                if (_people == null)
                {
                    var newCollection = new FixupCollection<Person>();
                    newCollection.CollectionChanged += FixupPeople;
                    _people = newCollection;
                }
                return _people;
            }
            set
            {
                if (!ReferenceEquals(_people, value))
                {
                    var previousValue = _people as FixupCollection<Person>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPeople;
                    }
                    _people = value;
                    var newValue = value as FixupCollection<Person>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPeople;
                    }
                }
            }
        }
        private ICollection<Person> _people;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupThumbnail(Image previousValue)
        {
            if (previousValue != null && previousValue.FullSizeVersions.Contains(this))
            {
                previousValue.FullSizeVersions.Remove(this);
            }
    
            if (Thumbnail != null)
            {
                if (!Thumbnail.FullSizeVersions.Contains(this))
                {
                    Thumbnail.FullSizeVersions.Add(this);
                }
                if (ThumbnailId != Thumbnail.ImageId)
                {
                    ThumbnailId = Thumbnail.ImageId;
                }
            }
            else if (!_settingFK)
            {
                ThumbnailId = null;
            }
        }
    
        private void FixupImageProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProjectImage item in e.NewItems)
                {
                    item.Image = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectImage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Image, this))
                    {
                        item.Image = null;
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.ThumbnailImage = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.ThumbnailImage, this))
                    {
                        item.ThumbnailImage = null;
                    }
                }
            }
        }
    
        private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    item.Logo = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (ReferenceEquals(item.Logo, this))
                    {
                        item.Logo = null;
                    }
                }
            }
        }
    
        private void FixupFullSizeVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Image item in e.NewItems)
                {
                    item.Thumbnail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Image item in e.OldItems)
                {
                    if (ReferenceEquals(item.Thumbnail, this))
                    {
                        item.Thumbnail = null;
                    }
                }
            }
        }
    
        private void FixupPeople(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Person item in e.NewItems)
                {
                    item.Thumbnail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Person item in e.OldItems)
                {
                    if (ReferenceEquals(item.Thumbnail, this))
                    {
                        item.Thumbnail = null;
                    }
                }
            }
        }

        #endregion
    }
}

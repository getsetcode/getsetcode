//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace getsetcode.Model
{
    public partial class Contract
    {
        #region Primitive Properties
    
        public virtual int ContractId
        {
            get;
            set;
        }
    
        public virtual int ClientId
        {
            get { return _clientId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clientId != value)
                    {
                        if (Client != null && Client.ClientId != value)
                        {
                            Client = null;
                        }
                        _clientId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _clientId;
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> AgencyId
        {
            get { return _agencyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_agencyId != value)
                    {
                        if (Agency != null && Agency.AgencyId != value)
                        {
                            Agency = null;
                        }
                        _agencyId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _agencyId;
    
        public virtual string ContactDetails
        {
            get;
            set;
        }
    
        public virtual string WorkDetails
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Agency Agency
        {
            get { return _agency; }
            set
            {
                if (!ReferenceEquals(_agency, value))
                {
                    var previousValue = _agency;
                    _agency = value;
                    FixupAgency(previousValue);
                }
            }
        }
        private Agency _agency;
    
        public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;
    
        public virtual ICollection<Rate> Rates
        {
            get
            {
                if (_rates == null)
                {
                    var newCollection = new FixupCollection<Rate>();
                    newCollection.CollectionChanged += FixupRates;
                    _rates = newCollection;
                }
                return _rates;
            }
            set
            {
                if (!ReferenceEquals(_rates, value))
                {
                    var previousValue = _rates as FixupCollection<Rate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRates;
                    }
                    _rates = value;
                    var newValue = value as FixupCollection<Rate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRates;
                    }
                }
            }
        }
        private ICollection<Rate> _rates;
    
        public virtual ICollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    var newCollection = new FixupCollection<Project>();
                    newCollection.CollectionChanged += FixupProjects;
                    _projects = newCollection;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    var previousValue = _projects as FixupCollection<Project>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    var newValue = value as FixupCollection<Project>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProjects;
                    }
                }
            }
        }
        private ICollection<Project> _projects;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAgency(Agency previousValue)
        {
            if (previousValue != null && previousValue.Contract.Contains(this))
            {
                previousValue.Contract.Remove(this);
            }
    
            if (Agency != null)
            {
                if (!Agency.Contract.Contains(this))
                {
                    Agency.Contract.Add(this);
                }
                if (AgencyId != Agency.AgencyId)
                {
                    AgencyId = Agency.AgencyId;
                }
            }
            else if (!_settingFK)
            {
                AgencyId = null;
            }
        }
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.Contracts.Contains(this))
            {
                previousValue.Contracts.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.Contracts.Contains(this))
                {
                    Client.Contracts.Add(this);
                }
                if (ClientId != Client.ClientId)
                {
                    ClientId = Client.ClientId;
                }
            }
        }
    
        private void FixupRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rate item in e.NewItems)
                {
                    item.Contract = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contract, this))
                    {
                        item.Contract = null;
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    if (!item.Contracts.Contains(this))
                    {
                        item.Contracts.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (item.Contracts.Contains(this))
                    {
                        item.Contracts.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}

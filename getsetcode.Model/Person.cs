//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace getsetcode.Model
{
    public partial class Person
    {
        #region Primitive Properties
    
        public virtual int PersonId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string OfficePhone
        {
            get;
            set;
        }
    
        public virtual string MobilePhone
        {
            get;
            set;
        }
    
        public virtual string EmailAddress
        {
            get;
            set;
        }
    
        public virtual bool Active
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ThumbnailId
        {
            get { return _thumbnailId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_thumbnailId != value)
                    {
                        if (Thumbnail != null && Thumbnail.ImageId != value)
                        {
                            Thumbnail = null;
                        }
                        _thumbnailId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _thumbnailId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Testimonial> Testimonials
        {
            get
            {
                if (_testimonials == null)
                {
                    var newCollection = new FixupCollection<Testimonial>();
                    newCollection.CollectionChanged += FixupTestimonials;
                    _testimonials = newCollection;
                }
                return _testimonials;
            }
            set
            {
                if (!ReferenceEquals(_testimonials, value))
                {
                    var previousValue = _testimonials as FixupCollection<Testimonial>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTestimonials;
                    }
                    _testimonials = value;
                    var newValue = value as FixupCollection<Testimonial>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTestimonials;
                    }
                }
            }
        }
        private ICollection<Testimonial> _testimonials;
    
        public virtual ICollection<Agency> Agencies
        {
            get
            {
                if (_agencies == null)
                {
                    var newCollection = new FixupCollection<Agency>();
                    newCollection.CollectionChanged += FixupAgencies;
                    _agencies = newCollection;
                }
                return _agencies;
            }
            set
            {
                if (!ReferenceEquals(_agencies, value))
                {
                    var previousValue = _agencies as FixupCollection<Agency>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAgencies;
                    }
                    _agencies = value;
                    var newValue = value as FixupCollection<Agency>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAgencies;
                    }
                }
            }
        }
        private ICollection<Agency> _agencies;
    
        public virtual ICollection<Client> Clients
        {
            get
            {
                if (_clients == null)
                {
                    var newCollection = new FixupCollection<Client>();
                    newCollection.CollectionChanged += FixupClients;
                    _clients = newCollection;
                }
                return _clients;
            }
            set
            {
                if (!ReferenceEquals(_clients, value))
                {
                    var previousValue = _clients as FixupCollection<Client>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClients;
                    }
                    _clients = value;
                    var newValue = value as FixupCollection<Client>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClients;
                    }
                }
            }
        }
        private ICollection<Client> _clients;
    
        public virtual Image Thumbnail
        {
            get { return _thumbnail; }
            set
            {
                if (!ReferenceEquals(_thumbnail, value))
                {
                    var previousValue = _thumbnail;
                    _thumbnail = value;
                    FixupThumbnail(previousValue);
                }
            }
        }
        private Image _thumbnail;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupThumbnail(Image previousValue)
        {
            if (previousValue != null && previousValue.People.Contains(this))
            {
                previousValue.People.Remove(this);
            }
    
            if (Thumbnail != null)
            {
                if (!Thumbnail.People.Contains(this))
                {
                    Thumbnail.People.Add(this);
                }
                if (ThumbnailId != Thumbnail.ImageId)
                {
                    ThumbnailId = Thumbnail.ImageId;
                }
            }
            else if (!_settingFK)
            {
                ThumbnailId = null;
            }
        }
    
        private void FixupTestimonials(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Testimonial item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Testimonial item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupAgencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Agency item in e.NewItems)
                {
                    if (!item.People.Contains(this))
                    {
                        item.People.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Agency item in e.OldItems)
                {
                    if (item.People.Contains(this))
                    {
                        item.People.Remove(this);
                    }
                }
            }
        }
    
        private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Client item in e.NewItems)
                {
                    if (!item.People.Contains(this))
                    {
                        item.People.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Client item in e.OldItems)
                {
                    if (item.People.Contains(this))
                    {
                        item.People.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}

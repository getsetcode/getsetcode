//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace getsetcode.Model
{
    public partial class Testimonial
    {
        #region Primitive Properties
    
        public virtual int TestimonialId
        {
            get;
            set;
        }
    
        public virtual int PersonId
        {
            get { return _personId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_personId != value)
                    {
                        if (Person != null && Person.PersonId != value)
                        {
                            Person = null;
                        }
                        _personId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _personId;
    
        public virtual System.DateTime Date
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ClientId
        {
            get { return _clientId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_clientId != value)
                    {
                        if (Client != null && Client.ClientId != value)
                        {
                            Client = null;
                        }
                        _clientId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _clientId;
    
        public virtual string Quote
        {
            get;
            set;
        }
    
        public virtual string Role
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<HistoryItem> HistoryItems
        {
            get
            {
                if (_historyItems == null)
                {
                    var newCollection = new FixupCollection<HistoryItem>();
                    newCollection.CollectionChanged += FixupHistoryItems;
                    _historyItems = newCollection;
                }
                return _historyItems;
            }
            set
            {
                if (!ReferenceEquals(_historyItems, value))
                {
                    var previousValue = _historyItems as FixupCollection<HistoryItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHistoryItems;
                    }
                    _historyItems = value;
                    var newValue = value as FixupCollection<HistoryItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHistoryItems;
                    }
                }
            }
        }
        private ICollection<HistoryItem> _historyItems;
    
        public virtual Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                }
            }
        }
        private Person _person;
    
        public virtual Client Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                }
            }
        }
        private Client _client;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupPerson(Person previousValue)
        {
            if (previousValue != null && previousValue.Testimonials.Contains(this))
            {
                previousValue.Testimonials.Remove(this);
            }
    
            if (Person != null)
            {
                if (!Person.Testimonials.Contains(this))
                {
                    Person.Testimonials.Add(this);
                }
                if (PersonId != Person.PersonId)
                {
                    PersonId = Person.PersonId;
                }
            }
        }
    
        private void FixupClient(Client previousValue)
        {
            if (previousValue != null && previousValue.Testimonials.Contains(this))
            {
                previousValue.Testimonials.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.Testimonials.Contains(this))
                {
                    Client.Testimonials.Add(this);
                }
                if (ClientId != Client.ClientId)
                {
                    ClientId = Client.ClientId;
                }
            }
            else if (!_settingFK)
            {
                ClientId = null;
            }
        }
    
        private void FixupHistoryItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HistoryItem item in e.NewItems)
                {
                    item.Testimonial = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Testimonial, this))
                    {
                        item.Testimonial = null;
                    }
                }
            }
        }

        #endregion
    }
}
